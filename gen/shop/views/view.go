// Code generated by goa v3.1.1, DO NOT EDIT.
//
// shop views
//
// Command:
// $ goa gen goa-shopping/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// GoodsSpu is the viewed result type that is projected based on a view.
type GoodsSpu struct {
	// Type to project
	Projected *GoodsSpuView
	// View to render
	View string
}

// GoodsSpuView is a type that runs validations on a projected type.
type GoodsSpuView struct {
	// ID
	ID *int
	// 商品名称
	Name *string
	// 商品描述
	Description *string
	// 商品类型
	GoodsType *GoodsTypeView
	// 商品品牌
	GoodsBrand *GoodsBrandView
	// 商品SKU
	GoodsSku []*GoodsSkuView
}

// GoodsTypeView is a type that runs validations on a projected type.
type GoodsTypeView struct {
	// ID
	ID *int
	// 类型名称
	Name *string
	// 类型描述
	Description *string
}

// GoodsBrandView is a type that runs validations on a projected type.
type GoodsBrandView struct {
	// ID
	ID *int
	// 品牌名称
	Name *string
	// 品牌描述
	Description *string
}

// GoodsSkuView is a type that runs validations on a projected type.
type GoodsSkuView struct {
	// ID
	ID *int
	// 颜色
	Name *string
	// 商品SKU规格值
	GoodsSkuValue []*GoodsSkuValueView
}

// GoodsSkuValueView is a type that runs validations on a projected type.
type GoodsSkuValueView struct {
	// ID
	ID *int
	// 红色
	Name *string
}

var (
	// GoodsSpuMap is a map of attribute names in result type GoodsSpu indexed by
	// view name.
	GoodsSpuMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"description",
			"goods_type",
			"goods_brand",
			"goods_sku",
		},
	}
	// GoodsTypeMap is a map of attribute names in result type GoodsType indexed by
	// view name.
	GoodsTypeMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"description",
		},
	}
	// GoodsBrandMap is a map of attribute names in result type GoodsBrand indexed
	// by view name.
	GoodsBrandMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"description",
		},
	}
	// GoodsSkuMap is a map of attribute names in result type GoodsSku indexed by
	// view name.
	GoodsSkuMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"goods_sku_value",
		},
	}
	// GoodsSkuValueMap is a map of attribute names in result type GoodsSkuValue
	// indexed by view name.
	GoodsSkuValueMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
)

// ValidateGoodsSpu runs the validations defined on the viewed result type
// GoodsSpu.
func ValidateGoodsSpu(result *GoodsSpu) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoodsSpuView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoodsSpuView runs the validations defined on GoodsSpuView using the
// "default" view.
func ValidateGoodsSpuView(result *GoodsSpuView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	for _, e := range result.GoodsSku {
		if e != nil {
			if err2 := ValidateGoodsSkuView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.GoodsType != nil {
		if err2 := ValidateGoodsTypeView(result.GoodsType); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.GoodsBrand != nil {
		if err2 := ValidateGoodsBrandView(result.GoodsBrand); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGoodsTypeView runs the validations defined on GoodsTypeView using
// the "default" view.
func ValidateGoodsTypeView(result *GoodsTypeView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	return
}

// ValidateGoodsBrandView runs the validations defined on GoodsBrandView using
// the "default" view.
func ValidateGoodsBrandView(result *GoodsBrandView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	return
}

// ValidateGoodsSkuView runs the validations defined on GoodsSkuView using the
// "default" view.
func ValidateGoodsSkuView(result *GoodsSkuView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	for _, e := range result.GoodsSkuValue {
		if e != nil {
			if err2 := ValidateGoodsSkuValueView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGoodsSkuValueView runs the validations defined on GoodsSkuValueView
// using the "default" view.
func ValidateGoodsSkuValueView(result *GoodsSkuValueView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
