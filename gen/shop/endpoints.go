// Code generated by goa v3.1.1, DO NOT EDIT.
//
// shop endpoints
//
// Command:
// $ goa gen goa-shopping/design

package shop

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "shop" service endpoints.
type Endpoints struct {
	GoodsList   goa.Endpoint
	GetGoods    goa.Endpoint
	UpdateGoods goa.Endpoint
}

// NewEndpoints wraps the methods of the "shop" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GoodsList:   NewGoodsListEndpoint(s, a.JWTAuth),
		GetGoods:    NewGetGoodsEndpoint(s, a.JWTAuth),
		UpdateGoods: NewUpdateGoodsEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "shop" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GoodsList = m(e.GoodsList)
	e.GetGoods = m(e.GetGoods)
	e.UpdateGoods = m(e.UpdateGoods)
}

// NewGoodsListEndpoint returns an endpoint function that calls the method
// "GoodsList" of service "shop".
func NewGoodsListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GoodsListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"role:user", "role:admin"},
			RequiredScopes: []string{"role:user", "role:admin"},
		}
		var token string
		if p.JWTToken != nil {
			token = *p.JWTToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GoodsList(ctx, p)
	}
}

// NewGetGoodsEndpoint returns an endpoint function that calls the method
// "GetGoods" of service "shop".
func NewGetGoodsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetGoodsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"role:user", "role:admin"},
			RequiredScopes: []string{"role:user", "role:admin"},
		}
		ctx, err = authJWTFn(ctx, p.JWTToken, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.GetGoods(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoodsSpu(res, "default")
		return vres, nil
	}
}

// NewUpdateGoodsEndpoint returns an endpoint function that calls the method
// "UpdateGoods" of service "shop".
func NewUpdateGoodsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateGoodsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"role:user", "role:admin"},
			RequiredScopes: []string{"role:admin"},
		}
		ctx, err = authJWTFn(ctx, p.JWTToken, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.UpdateGoods(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoodsSpu(res, "default")
		return vres, nil
	}
}
