// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth views
//
// Command:
// $ goa gen goa-shopping/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// UserInfo is the viewed result type that is projected based on a view.
type UserInfo struct {
	// Type to project
	Projected *UserInfoView
	// View to render
	View string
}

// Session is the viewed result type that is projected based on a view.
type Session struct {
	// Type to project
	Projected *SessionView
	// View to render
	View string
}

// Success is the viewed result type that is projected based on a view.
type Success struct {
	// Type to project
	Projected *SuccessView
	// View to render
	View string
}

// UserInfoView is a type that runs validations on a projected type.
type UserInfoView struct {
	// 错误码(0: 成功; 大于0: 失败)
	Errcode *int
	// 错误消息
	Errmsg *string
	// 用户信息
	Data *UserView
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID
	ID *int
	// 用户名
	Username *string
	// 昵称
	Nickname *string
	// 手机号
	Mobile *string
	// 邮箱
	Email *string
	// 类型：1 用户， 2 管理员
	Type *int
	// 是否可用
	IsActive *bool
	// 登录时间
	LoginTime *string
}

// SessionView is a type that runs validations on a projected type.
type SessionView struct {
	User        *UserView
	Credentials *CredentialsView
}

// CredentialsView is a type that runs validations on a projected type.
type CredentialsView struct {
	// JWT token
	Token *string
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn *int
}

// SuccessView is a type that runs validations on a projected type.
type SuccessView struct {
	// success
	OK *bool
}

var (
	// UserInfoMap is a map of attribute names in result type UserInfo indexed by
	// view name.
	UserInfoMap = map[string][]string{
		"default": []string{
			"errcode",
			"errmsg",
			"data",
		},
	}
	// SessionMap is a map of attribute names in result type Session indexed by
	// view name.
	SessionMap = map[string][]string{
		"default": []string{
			"user",
			"credentials",
		},
	}
	// SuccessMap is a map of attribute names in result type Success indexed by
	// view name.
	SuccessMap = map[string][]string{
		"default": []string{
			"ok",
		},
	}
	// UserMap is a map of attribute names in result type User indexed by view name.
	UserMap = map[string][]string{
		"default": []string{
			"id",
			"username",
			"nickname",
			"mobile",
			"email",
			"type",
			"isActive",
		},
		"simple": []string{
			"id",
			"nickname",
			"mobile",
			"email",
			"type",
			"isActive",
		},
	}
)

// ValidateUserInfo runs the validations defined on the viewed result type
// UserInfo.
func ValidateUserInfo(result *UserInfo) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserInfoView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSession runs the validations defined on the viewed result type
// Session.
func ValidateSession(result *Session) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSessionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSuccess runs the validations defined on the viewed result type
// Success.
func ValidateSuccess(result *Success) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSuccessView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUserInfoView runs the validations defined on UserInfoView using the
// "default" view.
func ValidateUserInfoView(result *UserInfoView) (err error) {
	if result.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "result"))
	}
	if result.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "result"))
	}
	if result.Errcode != nil {
		if *result.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.errcode", *result.Errcode, 0, true))
		}
	}
	if result.Errcode != nil {
		if *result.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.errcode", *result.Errcode, 999999, false))
		}
	}
	if result.Data != nil {
		if err2 := ValidateUserViewSimple(result.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "result"))
	}
	if result.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nickname", "result"))
	}
	if result.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isActive", "result"))
	}
	return
}

// ValidateUserViewSimple runs the validations defined on UserView using the
// "simple" view.
func ValidateUserViewSimple(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nickname", "result"))
	}
	if result.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isActive", "result"))
	}
	return
}

// ValidateSessionView runs the validations defined on SessionView using the
// "default" view.
func ValidateSessionView(result *SessionView) (err error) {
	if result.Credentials == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("credentials", "result"))
	}
	if result.Credentials != nil {
		if err2 := ValidateCredentialsView(result.Credentials); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.User != nil {
		if err2 := ValidateUserView(result.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCredentialsView runs the validations defined on CredentialsView.
func ValidateCredentialsView(result *CredentialsView) (err error) {
	if result.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "result"))
	}
	if result.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "result"))
	}
	return
}

// ValidateSuccessView runs the validations defined on SuccessView using the
// "default" view.
func ValidateSuccessView(result *SuccessView) (err error) {
	if result.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "result"))
	}
	return
}
