// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen goa-shopping/design

package auth

import (
	"context"
	authviews "goa-shopping/gen/auth/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// 用户服务
type Service interface {
	// 使用手机号或者邮箱 + 密码登录
	Login(context.Context, *LoginPayload) (res *LoginResult, err error)
	// 获取用户信息
	GetUserInfo(context.Context, *GetUserInfoPayload) (res *UserInfo, err error)
	// 用户注册使用手机/邮箱+验证码注册
	SignUp(context.Context, *SignUpPayload) (res *Session, err error)
	// 重置密码
	SetPassword(context.Context, *SetPasswordPayload) (res *Success, err error)
	// 请求电子邮箱验证码
	RequestEmailCode(context.Context, *RequestEmailCodePayload) (res *Success, err error)
	// 请求短信验证码
	RequestSmSCode(context.Context, *RequestSmSCodePayload) (res *Success, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"Login", "GetUserInfo", "SignUp", "SetPassword", "RequestEmailCode", "RequestSmSCode"}

// LoginPayload is the payload type of the auth service Login method.
type LoginPayload struct {
	// 账号(手机号或者邮箱)
	Phone string
	// 密码
	Password string
}

// LoginResult is the result type of the auth service Login method.
type LoginResult struct {
	// 错误码
	Errcode int
	// 错误消息
	Errmsg string
	Data   *Session
}

// GetUserInfoPayload is the payload type of the auth service GetUserInfo
// method.
type GetUserInfoPayload struct {
	// jwt token
	JWTToken *string
}

// UserInfo is the result type of the auth service GetUserInfo method.
type UserInfo struct {
	// 错误码(0: 成功; 大于0: 失败)
	Errcode int
	// 错误消息
	Errmsg string
	// 用户信息
	Data *User
}

// SignUpPayload is the payload type of the auth service SignUp method.
type SignUpPayload struct {
	// Phone
	Phone *string
	// Email
	Email *string
	// 昵称
	Nickname string
	// 密码
	Password string
	// 验证码
	VerifyCode string
}

// Session is the result type of the auth service SignUp method.
type Session struct {
	User        *User
	Credentials *Credentials
}

// SetPasswordPayload is the payload type of the auth service SetPassword
// method.
type SetPasswordPayload struct {
	// 用户名（邮箱/手机号）
	Username string
	// 新密码
	NewPassword string
	// 验证码
	VerifyCode string
}

// Success is the result type of the auth service SetPassword method.
type Success struct {
	// success
	OK bool
}

// RequestEmailCodePayload is the payload type of the auth service
// RequestEmailCode method.
type RequestEmailCodePayload struct {
	// 电子邮箱
	Email string
	// 操作
	Action string
}

// RequestSmSCodePayload is the payload type of the auth service RequestSmSCode
// method.
type RequestSmSCodePayload struct {
	// 手机号码
	Mobile string
	// 操作
	Action string
}

// 用户
type User struct {
	// ID
	ID string
	// 用户名
	Username string
	// 昵称
	Nickname string
	// 手机号
	Mobile string
	// 邮箱
	Email string
	// 类型：1 用户， 2 管理员
	Type int
	// 是否可用
	IsActive bool
	// 登录时间
	LoginTime string
}

type Credentials struct {
	// JWT token
	Token string
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Fault:   true,
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewUserInfo initializes result type UserInfo from viewed result type
// UserInfo.
func NewUserInfo(vres *authviews.UserInfo) *UserInfo {
	return newUserInfo(vres.Projected)
}

// NewViewedUserInfo initializes viewed result type UserInfo from result type
// UserInfo using the given view.
func NewViewedUserInfo(res *UserInfo, view string) *authviews.UserInfo {
	p := newUserInfoView(res)
	return &authviews.UserInfo{Projected: p, View: "default"}
}

// NewSession initializes result type Session from viewed result type Session.
func NewSession(vres *authviews.Session) *Session {
	return newSession(vres.Projected)
}

// NewViewedSession initializes viewed result type Session from result type
// Session using the given view.
func NewViewedSession(res *Session, view string) *authviews.Session {
	p := newSessionView(res)
	return &authviews.Session{Projected: p, View: "default"}
}

// NewSuccess initializes result type Success from viewed result type Success.
func NewSuccess(vres *authviews.Success) *Success {
	return newSuccess(vres.Projected)
}

// NewViewedSuccess initializes viewed result type Success from result type
// Success using the given view.
func NewViewedSuccess(res *Success, view string) *authviews.Success {
	p := newSuccessView(res)
	return &authviews.Success{Projected: p, View: "default"}
}

// newUserInfo converts projected type UserInfo to service type UserInfo.
func newUserInfo(vres *authviews.UserInfoView) *UserInfo {
	res := &UserInfo{}
	if vres.Errcode != nil {
		res.Errcode = *vres.Errcode
	}
	if vres.Errmsg != nil {
		res.Errmsg = *vres.Errmsg
	}
	if vres.Data != nil {
		res.Data = newUserSimple(vres.Data)
	}
	return res
}

// newUserInfoView projects result type UserInfo to projected type UserInfoView
// using the "default" view.
func newUserInfoView(res *UserInfo) *authviews.UserInfoView {
	vres := &authviews.UserInfoView{
		Errcode: &res.Errcode,
		Errmsg:  &res.Errmsg,
	}
	if res.Data != nil {
		vres.Data = newUserViewSimple(res.Data)
	}
	return vres
}

// newUser converts projected type User to service type User.
func newUser(vres *authviews.UserView) *User {
	res := &User{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Username != nil {
		res.Username = *vres.Username
	}
	if vres.Nickname != nil {
		res.Nickname = *vres.Nickname
	}
	if vres.Mobile != nil {
		res.Mobile = *vres.Mobile
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.IsActive != nil {
		res.IsActive = *vres.IsActive
	}
	return res
}

// newUserSimple converts projected type User to service type User.
func newUserSimple(vres *authviews.UserView) *User {
	res := &User{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Nickname != nil {
		res.Nickname = *vres.Nickname
	}
	if vres.Mobile != nil {
		res.Mobile = *vres.Mobile
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.IsActive != nil {
		res.IsActive = *vres.IsActive
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *authviews.UserView {
	vres := &authviews.UserView{
		ID:       &res.ID,
		Username: &res.Username,
		Nickname: &res.Nickname,
		Mobile:   &res.Mobile,
		Email:    &res.Email,
		Type:     &res.Type,
		IsActive: &res.IsActive,
	}
	return vres
}

// newUserViewSimple projects result type User to projected type UserView using
// the "simple" view.
func newUserViewSimple(res *User) *authviews.UserView {
	vres := &authviews.UserView{
		ID:       &res.ID,
		Nickname: &res.Nickname,
		Mobile:   &res.Mobile,
		Email:    &res.Email,
		Type:     &res.Type,
		IsActive: &res.IsActive,
	}
	return vres
}

// newSession converts projected type Session to service type Session.
func newSession(vres *authviews.SessionView) *Session {
	res := &Session{}
	if vres.Credentials != nil {
		res.Credentials = transformAuthviewsCredentialsViewToCredentials(vres.Credentials)
	}
	if vres.User != nil {
		res.User = newUser(vres.User)
	}
	return res
}

// newSessionView projects result type Session to projected type SessionView
// using the "default" view.
func newSessionView(res *Session) *authviews.SessionView {
	vres := &authviews.SessionView{}
	if res.Credentials != nil {
		vres.Credentials = transformCredentialsToAuthviewsCredentialsView(res.Credentials)
	}
	if res.User != nil {
		vres.User = newUserView(res.User)
	}
	return vres
}

// newSuccess converts projected type Success to service type Success.
func newSuccess(vres *authviews.SuccessView) *Success {
	res := &Success{}
	if vres.OK != nil {
		res.OK = *vres.OK
	}
	return res
}

// newSuccessView projects result type Success to projected type SuccessView
// using the "default" view.
func newSuccessView(res *Success) *authviews.SuccessView {
	vres := &authviews.SuccessView{
		OK: &res.OK,
	}
	return vres
}

// transformAuthviewsCredentialsViewToCredentials builds a value of type
// *Credentials from a value of type *authviews.CredentialsView.
func transformAuthviewsCredentialsViewToCredentials(v *authviews.CredentialsView) *Credentials {
	if v == nil {
		return nil
	}
	res := &Credentials{
		Token:     *v.Token,
		ExpiresIn: *v.ExpiresIn,
	}

	return res
}

// transformCredentialsToAuthviewsCredentialsView builds a value of type
// *authviews.CredentialsView from a value of type *Credentials.
func transformCredentialsToAuthviewsCredentialsView(v *Credentials) *authviews.CredentialsView {
	res := &authviews.CredentialsView{
		Token:     &v.Token,
		ExpiresIn: &v.ExpiresIn,
	}

	return res
}
