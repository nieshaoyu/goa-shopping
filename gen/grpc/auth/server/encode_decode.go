// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth gRPC server encoders and decoders
//
// Command:
// $ goa gen goa-shopping/design

package server

import (
	"context"
	auth "goa-shopping/gen/auth"
	authviews "goa-shopping/gen/auth/views"
	authpb "goa-shopping/gen/grpc/auth/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeRequestEmailCodeResponse encodes responses from the "auth" service
// "RequestEmailCode" endpoint.
func EncodeRequestEmailCodeResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*authviews.Success)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "RequestEmailCode", "*authviews.Success", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewRequestEmailCodeResponse(result)
	return resp, nil
}

// DecodeRequestEmailCodeRequest decodes requests sent to "auth" service
// "RequestEmailCode" endpoint.
func DecodeRequestEmailCodeRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *authpb.RequestEmailCodeRequest
		ok      bool
	)
	{
		if message, ok = v.(*authpb.RequestEmailCodeRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auth", "RequestEmailCode", "*authpb.RequestEmailCodeRequest", v)
		}
		if err := ValidateRequestEmailCodeRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *auth.RequestEmailCodePayload
	{
		payload = NewRequestEmailCodePayload(message)
	}
	return payload, nil
}

// EncodeRequestSmSCodeResponse encodes responses from the "auth" service
// "RequestSmSCode" endpoint.
func EncodeRequestSmSCodeResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*authviews.Success)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "RequestSmSCode", "*authviews.Success", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewRequestSmSCodeResponse(result)
	return resp, nil
}

// DecodeRequestSmSCodeRequest decodes requests sent to "auth" service
// "RequestSmSCode" endpoint.
func DecodeRequestSmSCodeRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *authpb.RequestSmSCodeRequest
		ok      bool
	)
	{
		if message, ok = v.(*authpb.RequestSmSCodeRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auth", "RequestSmSCode", "*authpb.RequestSmSCodeRequest", v)
		}
		if err := ValidateRequestSmSCodeRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *auth.RequestSmSCodePayload
	{
		payload = NewRequestSmSCodePayload(message)
	}
	return payload, nil
}
