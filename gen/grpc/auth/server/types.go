// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth gRPC server types
//
// Command:
// $ goa gen goa-shopping/design

package server

import (
	auth "goa-shopping/gen/auth"
	authviews "goa-shopping/gen/auth/views"
	authpb "goa-shopping/gen/grpc/auth/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewRequestEmailCodePayload builds the payload of the "RequestEmailCode"
// endpoint of the "auth" service from the gRPC request type.
func NewRequestEmailCodePayload(message *authpb.RequestEmailCodeRequest) *auth.RequestEmailCodePayload {
	v := &auth.RequestEmailCodePayload{
		Email:  message.Email,
		Action: message.Action,
	}
	return v
}

// NewRequestEmailCodeResponse builds the gRPC response type from the result of
// the "RequestEmailCode" endpoint of the "auth" service.
func NewRequestEmailCodeResponse(result *authviews.SuccessView) *authpb.RequestEmailCodeResponse {
	message := &authpb.RequestEmailCodeResponse{}
	if result.OK != nil {
		message.Ok = *result.OK
	}
	return message
}

// NewRequestSmSCodePayload builds the payload of the "RequestSmSCode" endpoint
// of the "auth" service from the gRPC request type.
func NewRequestSmSCodePayload(message *authpb.RequestSmSCodeRequest) *auth.RequestSmSCodePayload {
	v := &auth.RequestSmSCodePayload{
		Mobile: message.Mobile,
		Action: message.Action,
	}
	return v
}

// NewRequestSmSCodeResponse builds the gRPC response type from the result of
// the "RequestSmSCode" endpoint of the "auth" service.
func NewRequestSmSCodeResponse(result *authviews.SuccessView) *authpb.RequestSmSCodeResponse {
	message := &authpb.RequestSmSCodeResponse{}
	if result.OK != nil {
		message.Ok = *result.OK
	}
	return message
}

// ValidateRequestEmailCodeRequest runs the validations defined on
// RequestEmailCodeRequest.
func ValidateRequestEmailCodeRequest(message *authpb.RequestEmailCodeRequest) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.email", message.Email, goa.FormatEmail))

	if !(message.Action == "register" || message.Action == "reset_password" || message.Action == "update_email") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.action", message.Action, []interface{}{"register", "reset_password", "update_email"}))
	}
	return
}

// ValidateRequestSmSCodeRequest runs the validations defined on
// RequestSmSCodeRequest.
func ValidateRequestSmSCodeRequest(message *authpb.RequestSmSCodeRequest) (err error) {
	if utf8.RuneCountInString(message.Mobile) < 11 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.mobile", message.Mobile, utf8.RuneCountInString(message.Mobile), 11, true))
	}
	if utf8.RuneCountInString(message.Mobile) > 11 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.mobile", message.Mobile, utf8.RuneCountInString(message.Mobile), 11, false))
	}
	if !(message.Action == "register" || message.Action == "reset_password" || message.Action == "update_mobile") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.action", message.Action, []interface{}{"register", "reset_password", "update_mobile"}))
	}
	return
}
