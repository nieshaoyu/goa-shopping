// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth gRPC client encoders and decoders
//
// Command:
// $ goa gen goa-shopping/design

package client

import (
	"context"
	auth "goa-shopping/gen/auth"
	authviews "goa-shopping/gen/auth/views"
	authpb "goa-shopping/gen/grpc/auth/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildRequestEmailCodeFunc builds the remote method to invoke for "auth"
// service "RequestEmailCode" endpoint.
func BuildRequestEmailCodeFunc(grpccli authpb.AuthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.RequestEmailCode(ctx, reqpb.(*authpb.RequestEmailCodeRequest), opts...)
		}
		return grpccli.RequestEmailCode(ctx, &authpb.RequestEmailCodeRequest{}, opts...)
	}
}

// EncodeRequestEmailCodeRequest encodes requests sent to auth RequestEmailCode
// endpoint.
func EncodeRequestEmailCodeRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*auth.RequestEmailCodePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "RequestEmailCode", "*auth.RequestEmailCodePayload", v)
	}
	return NewRequestEmailCodeRequest(payload), nil
}

// DecodeRequestEmailCodeResponse decodes responses from the auth
// RequestEmailCode endpoint.
func DecodeRequestEmailCodeResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*authpb.RequestEmailCodeResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "RequestEmailCode", "*authpb.RequestEmailCodeResponse", v)
	}
	res := NewRequestEmailCodeResult(message)
	vres := &authviews.Success{Projected: res, View: view}
	if err := authviews.ValidateSuccess(vres); err != nil {
		return nil, err
	}
	return auth.NewSuccess(vres), nil
}

// BuildRequestSmSCodeFunc builds the remote method to invoke for "auth"
// service "RequestSmSCode" endpoint.
func BuildRequestSmSCodeFunc(grpccli authpb.AuthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.RequestSmSCode(ctx, reqpb.(*authpb.RequestSmSCodeRequest), opts...)
		}
		return grpccli.RequestSmSCode(ctx, &authpb.RequestSmSCodeRequest{}, opts...)
	}
}

// EncodeRequestSmSCodeRequest encodes requests sent to auth RequestSmSCode
// endpoint.
func EncodeRequestSmSCodeRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*auth.RequestSmSCodePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "RequestSmSCode", "*auth.RequestSmSCodePayload", v)
	}
	return NewRequestSmSCodeRequest(payload), nil
}

// DecodeRequestSmSCodeResponse decodes responses from the auth RequestSmSCode
// endpoint.
func DecodeRequestSmSCodeResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*authpb.RequestSmSCodeResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "RequestSmSCode", "*authpb.RequestSmSCodeResponse", v)
	}
	res := NewRequestSmSCodeResult(message)
	vres := &authviews.Success{Projected: res, View: view}
	if err := authviews.ValidateSuccess(vres); err != nil {
		return nil, err
	}
	return auth.NewSuccess(vres), nil
}
