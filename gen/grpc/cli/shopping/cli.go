// Code generated by goa v3.1.1, DO NOT EDIT.
//
// shopping gRPC client CLI support package
//
// Command:
// $ goa gen goa-shopping/design

package cli

import (
	"flag"
	"fmt"
	authc "goa-shopping/gen/grpc/auth/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `auth (request-email-code|request-sm-s-code)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth request-email-code --message '{
      "action": "register",
      "email": "user@example.com"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authRequestEmailCodeFlags       = flag.NewFlagSet("request-email-code", flag.ExitOnError)
		authRequestEmailCodeMessageFlag = authRequestEmailCodeFlags.String("message", "", "")

		authRequestSmSCodeFlags       = flag.NewFlagSet("request-sm-s-code", flag.ExitOnError)
		authRequestSmSCodeMessageFlag = authRequestSmSCodeFlags.String("message", "", "")
	)
	authFlags.Usage = authUsage
	authRequestEmailCodeFlags.Usage = authRequestEmailCodeUsage
	authRequestSmSCodeFlags.Usage = authRequestSmSCodeUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "request-email-code":
				epf = authRequestEmailCodeFlags

			case "request-sm-s-code":
				epf = authRequestSmSCodeFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(cc, opts...)
			switch epn {
			case "request-email-code":
				endpoint = c.RequestEmailCode()
				data, err = authc.BuildRequestEmailCodePayload(*authRequestEmailCodeMessageFlag)
			case "request-sm-s-code":
				endpoint = c.RequestSmSCode()
				data, err = authc.BuildRequestSmSCodePayload(*authRequestSmSCodeMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `用户服务
Usage:
    %s [globalflags] auth COMMAND [flags]

COMMAND:
    request-email-code: 请求电子邮箱验证码
    request-sm-s-code: 请求短信验证码

Additional help:
    %s auth COMMAND --help
`, os.Args[0], os.Args[0])
}
func authRequestEmailCodeUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth request-email-code -message JSON

请求电子邮箱验证码
    -message JSON: 

Example:
    `+os.Args[0]+` auth request-email-code --message '{
      "action": "register",
      "email": "user@example.com"
   }'
`, os.Args[0])
}

func authRequestSmSCodeUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth request-sm-s-code -message JSON

请求短信验证码
    -message JSON: 

Example:
    `+os.Args[0]+` auth request-sm-s-code --message '{
      "action": "register",
      "mobile": "13838003800"
   }'
`, os.Args[0])
}
