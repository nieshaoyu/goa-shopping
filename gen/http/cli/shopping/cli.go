// Code generated by goa v3.1.1, DO NOT EDIT.
//
// shopping HTTP client CLI support package
//
// Command:
// $ goa gen goa-shopping/design

package cli

import (
	"flag"
	"fmt"
	authc "goa-shopping/gen/http/auth/client"
	shopc "goa-shopping/gen/http/shop/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `shop (goods-list|get-goods|update-goods)
auth (login|get-user-info|sign-up|set-password|request-email-code|request-sm-s-code)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` shop goods-list --cursor 0 --limit 20 --jwt-token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."` + "\n" +
		os.Args[0] + ` auth login --body '{
      "password": "password",
      "phone": "18396666666"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		shopFlags = flag.NewFlagSet("shop", flag.ContinueOnError)

		shopGoodsListFlags        = flag.NewFlagSet("goods-list", flag.ExitOnError)
		shopGoodsListCursorFlag   = shopGoodsListFlags.String("cursor", "REQUIRED", "")
		shopGoodsListLimitFlag    = shopGoodsListFlags.String("limit", "REQUIRED", "")
		shopGoodsListJWTTokenFlag = shopGoodsListFlags.String("jwt-token", "", "")

		shopGetGoodsFlags        = flag.NewFlagSet("get-goods", flag.ExitOnError)
		shopGetGoodsGoodsIDFlag  = shopGetGoodsFlags.String("goods-id", "REQUIRED", "")
		shopGetGoodsJWTTokenFlag = shopGetGoodsFlags.String("jwt-token", "REQUIRED", "")

		shopUpdateGoodsFlags        = flag.NewFlagSet("update-goods", flag.ExitOnError)
		shopUpdateGoodsBodyFlag     = shopUpdateGoodsFlags.String("body", "REQUIRED", "")
		shopUpdateGoodsGoodsIDFlag  = shopUpdateGoodsFlags.String("goods-id", "REQUIRED", "")
		shopUpdateGoodsJWTTokenFlag = shopUpdateGoodsFlags.String("jwt-token", "REQUIRED", "")

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		authLoginBodyFlag = authLoginFlags.String("body", "REQUIRED", "")

		authGetUserInfoFlags        = flag.NewFlagSet("get-user-info", flag.ExitOnError)
		authGetUserInfoJWTTokenFlag = authGetUserInfoFlags.String("jwt-token", "", "")

		authSignUpFlags    = flag.NewFlagSet("sign-up", flag.ExitOnError)
		authSignUpBodyFlag = authSignUpFlags.String("body", "REQUIRED", "")

		authSetPasswordFlags    = flag.NewFlagSet("set-password", flag.ExitOnError)
		authSetPasswordBodyFlag = authSetPasswordFlags.String("body", "REQUIRED", "")

		authRequestEmailCodeFlags    = flag.NewFlagSet("request-email-code", flag.ExitOnError)
		authRequestEmailCodeBodyFlag = authRequestEmailCodeFlags.String("body", "REQUIRED", "")

		authRequestSmSCodeFlags    = flag.NewFlagSet("request-sm-s-code", flag.ExitOnError)
		authRequestSmSCodeBodyFlag = authRequestSmSCodeFlags.String("body", "REQUIRED", "")
	)
	shopFlags.Usage = shopUsage
	shopGoodsListFlags.Usage = shopGoodsListUsage
	shopGetGoodsFlags.Usage = shopGetGoodsUsage
	shopUpdateGoodsFlags.Usage = shopUpdateGoodsUsage

	authFlags.Usage = authUsage
	authLoginFlags.Usage = authLoginUsage
	authGetUserInfoFlags.Usage = authGetUserInfoUsage
	authSignUpFlags.Usage = authSignUpUsage
	authSetPasswordFlags.Usage = authSetPasswordUsage
	authRequestEmailCodeFlags.Usage = authRequestEmailCodeUsage
	authRequestSmSCodeFlags.Usage = authRequestSmSCodeUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "shop":
			svcf = shopFlags
		case "auth":
			svcf = authFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "shop":
			switch epn {
			case "goods-list":
				epf = shopGoodsListFlags

			case "get-goods":
				epf = shopGetGoodsFlags

			case "update-goods":
				epf = shopUpdateGoodsFlags

			}

		case "auth":
			switch epn {
			case "login":
				epf = authLoginFlags

			case "get-user-info":
				epf = authGetUserInfoFlags

			case "sign-up":
				epf = authSignUpFlags

			case "set-password":
				epf = authSetPasswordFlags

			case "request-email-code":
				epf = authRequestEmailCodeFlags

			case "request-sm-s-code":
				epf = authRequestSmSCodeFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "shop":
			c := shopc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "goods-list":
				endpoint = c.GoodsList()
				data, err = shopc.BuildGoodsListPayload(*shopGoodsListCursorFlag, *shopGoodsListLimitFlag, *shopGoodsListJWTTokenFlag)
			case "get-goods":
				endpoint = c.GetGoods()
				data, err = shopc.BuildGetGoodsPayload(*shopGetGoodsGoodsIDFlag, *shopGetGoodsJWTTokenFlag)
			case "update-goods":
				endpoint = c.UpdateGoods()
				data, err = shopc.BuildUpdateGoodsPayload(*shopUpdateGoodsBodyFlag, *shopUpdateGoodsGoodsIDFlag, *shopUpdateGoodsJWTTokenFlag)
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = authc.BuildLoginPayload(*authLoginBodyFlag)
			case "get-user-info":
				endpoint = c.GetUserInfo()
				data, err = authc.BuildGetUserInfoPayload(*authGetUserInfoJWTTokenFlag)
			case "sign-up":
				endpoint = c.SignUp()
				data, err = authc.BuildSignUpPayload(*authSignUpBodyFlag)
			case "set-password":
				endpoint = c.SetPassword()
				data, err = authc.BuildSetPasswordPayload(*authSetPasswordBodyFlag)
			case "request-email-code":
				endpoint = c.RequestEmailCode()
				data, err = authc.BuildRequestEmailCodePayload(*authRequestEmailCodeBodyFlag)
			case "request-sm-s-code":
				endpoint = c.RequestSmSCode()
				data, err = authc.BuildRequestSmSCodePayload(*authRequestSmSCodeBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// shopUsage displays the usage of the shop command and its subcommands.
func shopUsage() {
	fmt.Fprintf(os.Stderr, `在线商城
Usage:
    %s [globalflags] shop COMMAND [flags]

COMMAND:
    goods-list: 商品列表
    get-goods: 商品详情
    update-goods: 更新商品

Additional help:
    %s shop COMMAND --help
`, os.Args[0], os.Args[0])
}
func shopGoodsListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] shop goods-list -cursor INT -limit INT -jwt-token STRING

商品列表
    -cursor INT: 
    -limit INT: 
    -jwt-token STRING: 

Example:
    `+os.Args[0]+` shop goods-list --cursor 0 --limit 20 --jwt-token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
`, os.Args[0])
}

func shopGetGoodsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] shop get-goods -goods-id STRING -jwt-token STRING

商品详情
    -goods-id STRING: 
    -jwt-token STRING: 

Example:
    `+os.Args[0]+` shop get-goods --goods-id "3" --jwt-token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
`, os.Args[0])
}

func shopUpdateGoodsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] shop update-goods -body JSON -goods-id STRING -jwt-token STRING

更新商品
    -body JSON: 
    -goods-id STRING: 
    -jwt-token STRING: 

Example:
    `+os.Args[0]+` shop update-goods --body '{
      "description": "水果x刘海屏就很丑",
      "name": "水果x"
   }' --goods-id "4ca" --jwt-token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
`, os.Args[0])
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `用户服务
Usage:
    %s [globalflags] auth COMMAND [flags]

COMMAND:
    login: 使用手机号或者邮箱 + 密码登录
    get-user-info: 获取用户信息
    sign-up: 用户注册使用手机/邮箱+验证码注册
    set-password: 重置密码
    request-email-code: 请求电子邮箱验证码
    request-sm-s-code: 请求短信验证码

Additional help:
    %s auth COMMAND --help
`, os.Args[0], os.Args[0])
}
func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth login -body JSON

使用手机号或者邮箱 + 密码登录
    -body JSON: 

Example:
    `+os.Args[0]+` auth login --body '{
      "password": "password",
      "phone": "18396666666"
   }'
`, os.Args[0])
}

func authGetUserInfoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth get-user-info -jwt-token STRING

获取用户信息
    -jwt-token STRING: 

Example:
    `+os.Args[0]+` auth get-user-info --jwt-token "Aut sit voluptatibus nulla."
`, os.Args[0])
}

func authSignUpUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth sign-up -body JSON

用户注册使用手机/邮箱+验证码注册
    -body JSON: 

Example:
    `+os.Args[0]+` auth sign-up --body '{
      "email": "ddu",
      "nickname": "2zc",
      "password": "nac",
      "phone": "18399999999",
      "verify_code": "hrx"
   }'
`, os.Args[0])
}

func authSetPasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth set-password -body JSON

重置密码
    -body JSON: 

Example:
    `+os.Args[0]+` auth set-password --body '{
      "new_password": "abc123455",
      "username": "13839003900",
      "verify_code": "888888"
   }'
`, os.Args[0])
}

func authRequestEmailCodeUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth request-email-code -body JSON

请求电子邮箱验证码
    -body JSON: 

Example:
    `+os.Args[0]+` auth request-email-code --body '{
      "action": "register",
      "email": "user@example.com"
   }'
`, os.Args[0])
}

func authRequestSmSCodeUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth request-sm-s-code -body JSON

请求短信验证码
    -body JSON: 

Example:
    `+os.Args[0]+` auth request-sm-s-code --body '{
      "action": "register",
      "mobile": "13838003800"
   }'
`, os.Args[0])
}
