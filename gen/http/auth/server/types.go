// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen goa-shopping/design

package server

import (
	auth "goa-shopping/gen/auth"
	authviews "goa-shopping/gen/auth/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "auth" service "Login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// 账号(手机号或者邮箱)
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// 密码
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// SignUpRequestBody is the type of the "auth" service "SignUp" endpoint HTTP
// request body.
type SignUpRequestBody struct {
	// Phone
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 昵称
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// 密码
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// 验证码
	VerifyCode *string `form:"verify_code,omitempty" json:"verify_code,omitempty" xml:"verify_code,omitempty"`
}

// SetPasswordRequestBody is the type of the "auth" service "SetPassword"
// endpoint HTTP request body.
type SetPasswordRequestBody struct {
	// 用户名（邮箱/手机号）
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 新密码
	NewPassword *string `form:"new_password,omitempty" json:"new_password,omitempty" xml:"new_password,omitempty"`
	// 验证码
	VerifyCode *string `form:"verify_code,omitempty" json:"verify_code,omitempty" xml:"verify_code,omitempty"`
}

// RequestEmailCodeRequestBody is the type of the "auth" service
// "RequestEmailCode" endpoint HTTP request body.
type RequestEmailCodeRequestBody struct {
	// 电子邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 操作
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
}

// RequestSmSCodeRequestBody is the type of the "auth" service "RequestSmSCode"
// endpoint HTTP request body.
type RequestSmSCodeRequestBody struct {
	// 手机号码
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 操作
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
}

// LoginResponseBody is the type of the "auth" service "Login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string               `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *SessionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetUserInfoResponseBody is the type of the "auth" service "GetUserInfo"
// endpoint HTTP response body.
type GetUserInfoResponseBody struct {
	// 错误码(0: 成功; 大于0: 失败)
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string `form:"errmsg" json:"errmsg" xml:"errmsg"`
	// 用户信息
	Data *UserResponseBodySimple `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// SignUpResponseBody is the type of the "auth" service "SignUp" endpoint HTTP
// response body.
type SignUpResponseBody struct {
	User        *UserResponseBody        `form:"user" json:"user" xml:"user"`
	Credentials *CredentialsResponseBody `form:"credentials" json:"credentials" xml:"credentials"`
}

// SetPasswordResponseBody is the type of the "auth" service "SetPassword"
// endpoint HTTP response body.
type SetPasswordResponseBody struct {
	// success
	OK bool `form:"ok" json:"ok" xml:"ok"`
}

// RequestEmailCodeResponseBody is the type of the "auth" service
// "RequestEmailCode" endpoint HTTP response body.
type RequestEmailCodeResponseBody struct {
	// success
	OK bool `form:"ok" json:"ok" xml:"ok"`
}

// RequestSmSCodeResponseBody is the type of the "auth" service
// "RequestSmSCode" endpoint HTTP response body.
type RequestSmSCodeResponseBody struct {
	// success
	OK bool `form:"ok" json:"ok" xml:"ok"`
}

// SignUpBadRequestResponseBody is the type of the "auth" service "SignUp"
// endpoint HTTP response body for the "bad_request" error.
type SignUpBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	User        *UserResponseBody        `form:"user" json:"user" xml:"user"`
	Credentials *CredentialsResponseBody `form:"credentials" json:"credentials" xml:"credentials"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 用户名
	Username string `form:"username" json:"username" xml:"username"`
	// 昵称
	Nickname string `form:"nickname" json:"nickname" xml:"nickname"`
	// 手机号
	Mobile string `form:"mobile" json:"mobile" xml:"mobile"`
	// 邮箱
	Email string `form:"email" json:"email" xml:"email"`
	// 类型：1 用户， 2 管理员
	Type int `form:"type" json:"type" xml:"type"`
	// 是否可用
	IsActive bool `form:"isActive" json:"isActive" xml:"isActive"`
	// 登录时间
	LoginTime string `form:"loginTime" json:"loginTime" xml:"loginTime"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// JWT token
	Token string `form:"token" json:"token" xml:"token"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// UserResponseBodySimple is used to define fields on response body types.
type UserResponseBodySimple struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 昵称
	Nickname string `form:"nickname" json:"nickname" xml:"nickname"`
	// 手机号
	Mobile string `form:"mobile" json:"mobile" xml:"mobile"`
	// 邮箱
	Email string `form:"email" json:"email" xml:"email"`
	// 类型：1 用户， 2 管理员
	Type int `form:"type" json:"type" xml:"type"`
	// 是否可用
	IsActive bool `form:"isActive" json:"isActive" xml:"isActive"`
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "Login" endpoint of the "auth" service.
func NewLoginResponseBody(res *auth.LoginResult) *LoginResponseBody {
	body := &LoginResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalAuthSessionToSessionResponseBody(res.Data)
	}
	return body
}

// NewGetUserInfoResponseBody builds the HTTP response body from the result of
// the "GetUserInfo" endpoint of the "auth" service.
func NewGetUserInfoResponseBody(res *authviews.UserInfoView) *GetUserInfoResponseBody {
	body := &GetUserInfoResponseBody{
		Errcode: *res.Errcode,
		Errmsg:  *res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalAuthviewsUserViewToUserResponseBodySimple(res.Data)
	}
	return body
}

// NewSignUpResponseBody builds the HTTP response body from the result of the
// "SignUp" endpoint of the "auth" service.
func NewSignUpResponseBody(res *authviews.SessionView) *SignUpResponseBody {
	body := &SignUpResponseBody{}
	if res.User != nil {
		body.User = marshalAuthviewsUserViewToUserResponseBody(res.User)
	}
	if res.Credentials != nil {
		body.Credentials = marshalAuthviewsCredentialsViewToCredentialsResponseBody(res.Credentials)
	}
	return body
}

// NewSetPasswordResponseBody builds the HTTP response body from the result of
// the "SetPassword" endpoint of the "auth" service.
func NewSetPasswordResponseBody(res *authviews.SuccessView) *SetPasswordResponseBody {
	body := &SetPasswordResponseBody{
		OK: *res.OK,
	}
	return body
}

// NewRequestEmailCodeResponseBody builds the HTTP response body from the
// result of the "RequestEmailCode" endpoint of the "auth" service.
func NewRequestEmailCodeResponseBody(res *authviews.SuccessView) *RequestEmailCodeResponseBody {
	body := &RequestEmailCodeResponseBody{
		OK: *res.OK,
	}
	return body
}

// NewRequestSmSCodeResponseBody builds the HTTP response body from the result
// of the "RequestSmSCode" endpoint of the "auth" service.
func NewRequestSmSCodeResponseBody(res *authviews.SuccessView) *RequestSmSCodeResponseBody {
	body := &RequestSmSCodeResponseBody{
		OK: *res.OK,
	}
	return body
}

// NewSignUpBadRequestResponseBody builds the HTTP response body from the
// result of the "SignUp" endpoint of the "auth" service.
func NewSignUpBadRequestResponseBody(res *goa.ServiceError) *SignUpBadRequestResponseBody {
	body := &SignUpBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginPayload builds a auth service Login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *auth.LoginPayload {
	v := &auth.LoginPayload{
		Phone:    *body.Phone,
		Password: *body.Password,
	}

	return v
}

// NewGetUserInfoPayload builds a auth service GetUserInfo endpoint payload.
func NewGetUserInfoPayload(jwtToken *string) *auth.GetUserInfoPayload {
	v := &auth.GetUserInfoPayload{}
	v.JWTToken = jwtToken

	return v
}

// NewSignUpPayload builds a auth service SignUp endpoint payload.
func NewSignUpPayload(body *SignUpRequestBody) *auth.SignUpPayload {
	v := &auth.SignUpPayload{
		Phone:      body.Phone,
		Email:      body.Email,
		Nickname:   *body.Nickname,
		Password:   *body.Password,
		VerifyCode: *body.VerifyCode,
	}

	return v
}

// NewSetPasswordPayload builds a auth service SetPassword endpoint payload.
func NewSetPasswordPayload(body *SetPasswordRequestBody) *auth.SetPasswordPayload {
	v := &auth.SetPasswordPayload{
		Username:    *body.Username,
		NewPassword: *body.NewPassword,
		VerifyCode:  *body.VerifyCode,
	}

	return v
}

// NewRequestEmailCodePayload builds a auth service RequestEmailCode endpoint
// payload.
func NewRequestEmailCodePayload(body *RequestEmailCodeRequestBody) *auth.RequestEmailCodePayload {
	v := &auth.RequestEmailCodePayload{
		Email:  *body.Email,
		Action: *body.Action,
	}

	return v
}

// NewRequestSmSCodePayload builds a auth service RequestSmSCode endpoint
// payload.
func NewRequestSmSCodePayload(body *RequestSmSCodeRequestBody) *auth.RequestSmSCodePayload {
	v := &auth.RequestSmSCodePayload{
		Mobile: *body.Mobile,
		Action: *body.Action,
	}

	return v
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Phone != nil {
		if utf8.RuneCountInString(*body.Phone) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.phone", *body.Phone, utf8.RuneCountInString(*body.Phone), 1, true))
		}
	}
	if body.Phone != nil {
		if utf8.RuneCountInString(*body.Phone) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.phone", *body.Phone, utf8.RuneCountInString(*body.Phone), 20, false))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 1, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 128, false))
		}
	}
	return
}

// ValidateSignUpRequestBody runs the validations defined on SignUpRequestBody
func ValidateSignUpRequestBody(body *SignUpRequestBody) (err error) {
	if body.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nickname", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.VerifyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("verify_code", "body"))
	}
	if body.Phone != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.phone", *body.Phone, goa.FormatEmail))
	}
	if body.Phone != nil {
		if utf8.RuneCountInString(*body.Phone) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.phone", *body.Phone, utf8.RuneCountInString(*body.Phone), 11, false))
		}
	}
	if body.Email != nil {
		if utf8.RuneCountInString(*body.Email) > 120 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.email", *body.Email, utf8.RuneCountInString(*body.Email), 120, false))
		}
	}
	if body.Nickname != nil {
		if utf8.RuneCountInString(*body.Nickname) > 120 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.nickname", *body.Nickname, utf8.RuneCountInString(*body.Nickname), 120, false))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 6, true))
		}
	}
	if body.VerifyCode != nil {
		if utf8.RuneCountInString(*body.VerifyCode) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.verify_code", *body.VerifyCode, utf8.RuneCountInString(*body.VerifyCode), 4, true))
		}
	}
	if body.VerifyCode != nil {
		if utf8.RuneCountInString(*body.VerifyCode) > 12 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.verify_code", *body.VerifyCode, utf8.RuneCountInString(*body.VerifyCode), 12, false))
		}
	}
	return
}

// ValidateSetPasswordRequestBody runs the validations defined on
// SetPasswordRequestBody
func ValidateSetPasswordRequestBody(body *SetPasswordRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("new_password", "body"))
	}
	if body.VerifyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("verify_code", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 128, false))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 6, true))
		}
	}
	return
}

// ValidateRequestEmailCodeRequestBody runs the validations defined on
// RequestEmailCodeRequestBody
func ValidateRequestEmailCodeRequestBody(body *RequestEmailCodeRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Action != nil {
		if !(*body.Action == "register" || *body.Action == "reset_password" || *body.Action == "update_email") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.action", *body.Action, []interface{}{"register", "reset_password", "update_email"}))
		}
	}
	return
}

// ValidateRequestSmSCodeRequestBody runs the validations defined on
// RequestSmSCodeRequestBody
func ValidateRequestSmSCodeRequestBody(body *RequestSmSCodeRequestBody) (err error) {
	if body.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	if body.Mobile != nil {
		if utf8.RuneCountInString(*body.Mobile) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mobile", *body.Mobile, utf8.RuneCountInString(*body.Mobile), 11, true))
		}
	}
	if body.Mobile != nil {
		if utf8.RuneCountInString(*body.Mobile) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mobile", *body.Mobile, utf8.RuneCountInString(*body.Mobile), 11, false))
		}
	}
	if body.Action != nil {
		if !(*body.Action == "register" || *body.Action == "reset_password" || *body.Action == "update_mobile") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.action", *body.Action, []interface{}{"register", "reset_password", "update_mobile"}))
		}
	}
	return
}
