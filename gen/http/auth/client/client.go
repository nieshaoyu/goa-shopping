// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen goa-shopping/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// Login Doer is the HTTP client used to make requests to the Login endpoint.
	LoginDoer goahttp.Doer

	// GetUserInfo Doer is the HTTP client used to make requests to the GetUserInfo
	// endpoint.
	GetUserInfoDoer goahttp.Doer

	// SignUp Doer is the HTTP client used to make requests to the SignUp endpoint.
	SignUpDoer goahttp.Doer

	// SetPassword Doer is the HTTP client used to make requests to the SetPassword
	// endpoint.
	SetPasswordDoer goahttp.Doer

	// RequestEmailCode Doer is the HTTP client used to make requests to the
	// RequestEmailCode endpoint.
	RequestEmailCodeDoer goahttp.Doer

	// RequestSmSCode Doer is the HTTP client used to make requests to the
	// RequestSmSCode endpoint.
	RequestSmSCodeDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		LoginDoer:            doer,
		GetUserInfoDoer:      doer,
		SignUpDoer:           doer,
		SetPasswordDoer:      doer,
		RequestEmailCodeDoer: doer,
		RequestSmSCodeDoer:   doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// Login returns an endpoint that makes HTTP requests to the auth service Login
// server.
func (c *Client) Login() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginRequest(c.encoder)
		decodeResponse = DecodeLoginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildLoginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "Login", err)
		}
		return decodeResponse(resp)
	}
}

// GetUserInfo returns an endpoint that makes HTTP requests to the auth service
// GetUserInfo server.
func (c *Client) GetUserInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUserInfoRequest(c.encoder)
		decodeResponse = DecodeGetUserInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUserInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "GetUserInfo", err)
		}
		return decodeResponse(resp)
	}
}

// SignUp returns an endpoint that makes HTTP requests to the auth service
// SignUp server.
func (c *Client) SignUp() goa.Endpoint {
	var (
		encodeRequest  = EncodeSignUpRequest(c.encoder)
		decodeResponse = DecodeSignUpResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSignUpRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SignUpDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "SignUp", err)
		}
		return decodeResponse(resp)
	}
}

// SetPassword returns an endpoint that makes HTTP requests to the auth service
// SetPassword server.
func (c *Client) SetPassword() goa.Endpoint {
	var (
		encodeRequest  = EncodeSetPasswordRequest(c.encoder)
		decodeResponse = DecodeSetPasswordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSetPasswordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SetPasswordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "SetPassword", err)
		}
		return decodeResponse(resp)
	}
}

// RequestEmailCode returns an endpoint that makes HTTP requests to the auth
// service RequestEmailCode server.
func (c *Client) RequestEmailCode() goa.Endpoint {
	var (
		encodeRequest  = EncodeRequestEmailCodeRequest(c.encoder)
		decodeResponse = DecodeRequestEmailCodeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRequestEmailCodeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RequestEmailCodeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "RequestEmailCode", err)
		}
		return decodeResponse(resp)
	}
}

// RequestSmSCode returns an endpoint that makes HTTP requests to the auth
// service RequestSmSCode server.
func (c *Client) RequestSmSCode() goa.Endpoint {
	var (
		encodeRequest  = EncodeRequestSmSCodeRequest(c.encoder)
		decodeResponse = DecodeRequestSmSCodeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRequestSmSCodeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RequestSmSCodeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "RequestSmSCode", err)
		}
		return decodeResponse(resp)
	}
}
