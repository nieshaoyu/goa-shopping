// Code generated by goa v3.1.1, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen goa-shopping/design

package client

import (
	auth "goa-shopping/gen/auth"
	authviews "goa-shopping/gen/auth/views"

	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "auth" service "Login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// 账号(手机号或者邮箱)
	Phone string `form:"phone" json:"phone" xml:"phone"`
	// 密码
	Password string `form:"password" json:"password" xml:"password"`
}

// SignUpRequestBody is the type of the "auth" service "SignUp" endpoint HTTP
// request body.
type SignUpRequestBody struct {
	// Phone
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 昵称
	Nickname string `form:"nickname" json:"nickname" xml:"nickname"`
	// 密码
	Password string `form:"password" json:"password" xml:"password"`
	// 验证码
	VerifyCode string `form:"verify_code" json:"verify_code" xml:"verify_code"`
}

// SetPasswordRequestBody is the type of the "auth" service "SetPassword"
// endpoint HTTP request body.
type SetPasswordRequestBody struct {
	// 用户名（邮箱/手机号）
	Username string `form:"username" json:"username" xml:"username"`
	// 新密码
	NewPassword string `form:"new_password" json:"new_password" xml:"new_password"`
	// 验证码
	VerifyCode string `form:"verify_code" json:"verify_code" xml:"verify_code"`
}

// RequestEmailCodeRequestBody is the type of the "auth" service
// "RequestEmailCode" endpoint HTTP request body.
type RequestEmailCodeRequestBody struct {
	// 电子邮箱
	Email string `form:"email" json:"email" xml:"email"`
	// 操作
	Action string `form:"action" json:"action" xml:"action"`
}

// RequestSmSCodeRequestBody is the type of the "auth" service "RequestSmSCode"
// endpoint HTTP request body.
type RequestSmSCodeRequestBody struct {
	// 手机号码
	Mobile string `form:"mobile" json:"mobile" xml:"mobile"`
	// 操作
	Action string `form:"action" json:"action" xml:"action"`
}

// LoginResponseBody is the type of the "auth" service "Login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string              `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   *SessionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetUserInfoResponseBody is the type of the "auth" service "GetUserInfo"
// endpoint HTTP response body.
type GetUserInfoResponseBody struct {
	// 错误码(0: 成功; 大于0: 失败)
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// 用户信息
	Data *UserResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// SignUpResponseBody is the type of the "auth" service "SignUp" endpoint HTTP
// response body.
type SignUpResponseBody struct {
	User        *UserResponseBody        `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Credentials *CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
}

// SetPasswordResponseBody is the type of the "auth" service "SetPassword"
// endpoint HTTP response body.
type SetPasswordResponseBody struct {
	// success
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
}

// RequestEmailCodeResponseBody is the type of the "auth" service
// "RequestEmailCode" endpoint HTTP response body.
type RequestEmailCodeResponseBody struct {
	// success
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
}

// RequestSmSCodeResponseBody is the type of the "auth" service
// "RequestSmSCode" endpoint HTTP response body.
type RequestSmSCodeResponseBody struct {
	// success
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
}

// SignUpBadRequestResponseBody is the type of the "auth" service "SignUp"
// endpoint HTTP response body for the "bad_request" error.
type SignUpBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	User        *UserResponseBody        `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Credentials *CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 昵称
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 类型：1 用户， 2 管理员
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// 是否可用
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// 登录时间
	LoginTime *string `form:"loginTime,omitempty" json:"loginTime,omitempty" xml:"loginTime,omitempty"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// JWT token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "Login" endpoint of the "auth" service.
func NewLoginRequestBody(p *auth.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Phone:    p.Phone,
		Password: p.Password,
	}
	return body
}

// NewSignUpRequestBody builds the HTTP request body from the payload of the
// "SignUp" endpoint of the "auth" service.
func NewSignUpRequestBody(p *auth.SignUpPayload) *SignUpRequestBody {
	body := &SignUpRequestBody{
		Phone:      p.Phone,
		Email:      p.Email,
		Nickname:   p.Nickname,
		Password:   p.Password,
		VerifyCode: p.VerifyCode,
	}
	return body
}

// NewSetPasswordRequestBody builds the HTTP request body from the payload of
// the "SetPassword" endpoint of the "auth" service.
func NewSetPasswordRequestBody(p *auth.SetPasswordPayload) *SetPasswordRequestBody {
	body := &SetPasswordRequestBody{
		Username:    p.Username,
		NewPassword: p.NewPassword,
		VerifyCode:  p.VerifyCode,
	}
	return body
}

// NewRequestEmailCodeRequestBody builds the HTTP request body from the payload
// of the "RequestEmailCode" endpoint of the "auth" service.
func NewRequestEmailCodeRequestBody(p *auth.RequestEmailCodePayload) *RequestEmailCodeRequestBody {
	body := &RequestEmailCodeRequestBody{
		Email:  p.Email,
		Action: p.Action,
	}
	return body
}

// NewRequestSmSCodeRequestBody builds the HTTP request body from the payload
// of the "RequestSmSCode" endpoint of the "auth" service.
func NewRequestSmSCodeRequestBody(p *auth.RequestSmSCodePayload) *RequestSmSCodeRequestBody {
	body := &RequestSmSCodeRequestBody{
		Mobile: p.Mobile,
		Action: p.Action,
	}
	return body
}

// NewLoginResultOK builds a "auth" service "Login" endpoint result from a HTTP
// "OK" response.
func NewLoginResultOK(body *LoginResponseBody) *auth.LoginResult {
	v := &auth.LoginResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
	}
	if body.Data != nil {
		v.Data = unmarshalSessionResponseBodyToAuthSession(body.Data)
	}

	return v
}

// NewGetUserInfoUserInfoOK builds a "auth" service "GetUserInfo" endpoint
// result from a HTTP "OK" response.
func NewGetUserInfoUserInfoOK(body *GetUserInfoResponseBody) *authviews.UserInfoView {
	v := &authviews.UserInfoView{
		Errcode: body.Errcode,
		Errmsg:  body.Errmsg,
	}
	if body.Data != nil {
		v.Data = unmarshalUserResponseBodyToAuthviewsUserView(body.Data)
	}

	return v
}

// NewSignUpSessionOK builds a "auth" service "SignUp" endpoint result from a
// HTTP "OK" response.
func NewSignUpSessionOK(body *SignUpResponseBody) *authviews.SessionView {
	v := &authviews.SessionView{}
	v.User = unmarshalUserResponseBodyToAuthviewsUserView(body.User)
	v.Credentials = unmarshalCredentialsResponseBodyToAuthviewsCredentialsView(body.Credentials)

	return v
}

// NewSignUpBadRequest builds a auth service SignUp endpoint bad_request error.
func NewSignUpBadRequest(body *SignUpBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSetPasswordSuccessOK builds a "auth" service "SetPassword" endpoint
// result from a HTTP "OK" response.
func NewSetPasswordSuccessOK(body *SetPasswordResponseBody) *authviews.SuccessView {
	v := &authviews.SuccessView{
		OK: body.OK,
	}

	return v
}

// NewRequestEmailCodeSuccessOK builds a "auth" service "RequestEmailCode"
// endpoint result from a HTTP "OK" response.
func NewRequestEmailCodeSuccessOK(body *RequestEmailCodeResponseBody) *authviews.SuccessView {
	v := &authviews.SuccessView{
		OK: body.OK,
	}

	return v
}

// NewRequestSmSCodeSuccessOK builds a "auth" service "RequestSmSCode" endpoint
// result from a HTTP "OK" response.
func NewRequestSmSCodeSuccessOK(body *RequestSmSCodeResponseBody) *authviews.SuccessView {
	v := &authviews.SuccessView{
		OK: body.OK,
	}

	return v
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	if body.Data != nil {
		if err2 := ValidateSessionResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSignUpBadRequestResponseBody runs the validations defined on
// SignUp_bad_request_Response_Body
func ValidateSignUpBadRequestResponseBody(body *SignUpBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSessionResponseBody runs the validations defined on
// SessionResponseBody
func ValidateSessionResponseBody(body *SessionResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Credentials == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("credentials", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Credentials != nil {
		if err2 := ValidateCredentialsResponseBody(body.Credentials); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nickname", "body"))
	}
	if body.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isActive", "body"))
	}
	if body.LoginTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("loginTime", "body"))
	}
	return
}

// ValidateCredentialsResponseBody runs the validations defined on
// CredentialsResponseBody
func ValidateCredentialsResponseBody(body *CredentialsResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	return
}
