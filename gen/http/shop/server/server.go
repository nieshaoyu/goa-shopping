// Code generated by goa v3.1.1, DO NOT EDIT.
//
// shop HTTP server
//
// Command:
// $ goa gen goa-shopping/design

package server

import (
	"context"
	shop "goa-shopping/gen/shop"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the shop service endpoint HTTP handlers.
type Server struct {
	Mounts      []*MountPoint
	GoodsList   http.Handler
	GetGoods    http.Handler
	UpdateGoods http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the shop service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *shop.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GoodsList", "GET", "/shop"},
			{"GetGoods", "GET", "/shop/{goodsId}"},
			{"UpdateGoods", "PUT", "/shop/{goodsId}"},
			{"gen/apidoc.html", "GET", "/shop/apidoc.html"},
		},
		GoodsList:   NewGoodsListHandler(e.GoodsList, mux, decoder, encoder, errhandler, formatter),
		GetGoods:    NewGetGoodsHandler(e.GetGoods, mux, decoder, encoder, errhandler, formatter),
		UpdateGoods: NewUpdateGoodsHandler(e.UpdateGoods, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "shop" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GoodsList = m(s.GoodsList)
	s.GetGoods = m(s.GetGoods)
	s.UpdateGoods = m(s.UpdateGoods)
}

// Mount configures the mux to serve the shop endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGoodsListHandler(mux, h.GoodsList)
	MountGetGoodsHandler(mux, h.GetGoods)
	MountUpdateGoodsHandler(mux, h.UpdateGoods)
	MountGenApidocHTML(mux, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "gen/apidoc.html")
	}))
}

// MountGoodsListHandler configures the mux to serve the "shop" service
// "GoodsList" endpoint.
func MountGoodsListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/shop", f)
}

// NewGoodsListHandler creates a HTTP handler which loads the HTTP request and
// calls the "shop" service "GoodsList" endpoint.
func NewGoodsListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGoodsListRequest(mux, decoder)
		encodeResponse = EncodeGoodsListResponse(encoder)
		encodeError    = EncodeGoodsListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GoodsList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "shop")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetGoodsHandler configures the mux to serve the "shop" service
// "GetGoods" endpoint.
func MountGetGoodsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/shop/{goodsId}", f)
}

// NewGetGoodsHandler creates a HTTP handler which loads the HTTP request and
// calls the "shop" service "GetGoods" endpoint.
func NewGetGoodsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGoodsRequest(mux, decoder)
		encodeResponse = EncodeGetGoodsResponse(encoder)
		encodeError    = EncodeGetGoodsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetGoods")
		ctx = context.WithValue(ctx, goa.ServiceKey, "shop")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateGoodsHandler configures the mux to serve the "shop" service
// "UpdateGoods" endpoint.
func MountUpdateGoodsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/shop/{goodsId}", f)
}

// NewUpdateGoodsHandler creates a HTTP handler which loads the HTTP request
// and calls the "shop" service "UpdateGoods" endpoint.
func NewUpdateGoodsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateGoodsRequest(mux, decoder)
		encodeResponse = EncodeUpdateGoodsResponse(encoder)
		encodeError    = EncodeUpdateGoodsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateGoods")
		ctx = context.WithValue(ctx, goa.ServiceKey, "shop")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenApidocHTML configures the mux to serve GET request made to
// "/shop/apidoc.html".
func MountGenApidocHTML(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/shop/apidoc.html", h.ServeHTTP)
}
