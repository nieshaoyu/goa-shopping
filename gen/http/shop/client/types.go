// Code generated by goa v3.1.1, DO NOT EDIT.
//
// shop HTTP client types
//
// Command:
// $ goa gen goa-shopping/design

package client

import (
	shop "goa-shopping/gen/shop"
	shopviews "goa-shopping/gen/shop/views"

	goa "goa.design/goa/v3/pkg"
)

// UpdateGoodsRequestBody is the type of the "shop" service "UpdateGoods"
// endpoint HTTP request body.
type UpdateGoodsRequestBody struct {
	// 商品名称
	Name string `form:"name" json:"name" xml:"name"`
	// 商品描述
	Description string `form:"description" json:"description" xml:"description"`
}

// GoodsListResponseBody is the type of the "shop" service "GoodsList" endpoint
// HTTP response body.
type GoodsListResponseBody struct {
	Items []*GoodsResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// 下一页游标
	NextCursor *int `form:"nextCursor,omitempty" json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// 总记录数
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// GetGoodsResponseBody is the type of the "shop" service "GetGoods" endpoint
// HTTP response body.
type GetGoodsResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 商品名称
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 商品描述
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// 商品类型
	GoodsType *GoodsTypeResponseBody `form:"goods_type,omitempty" json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 商品品牌
	GoodsBrand *GoodsBrandResponseBody `form:"goods_brand,omitempty" json:"goods_brand,omitempty" xml:"goods_brand,omitempty"`
	// 商品SKU
	GoodsSku []*GoodsSkuResponseBody `form:"goods_sku,omitempty" json:"goods_sku,omitempty" xml:"goods_sku,omitempty"`
}

// UpdateGoodsResponseBody is the type of the "shop" service "UpdateGoods"
// endpoint HTTP response body.
type UpdateGoodsResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 商品名称
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 商品描述
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// 商品类型
	GoodsType *GoodsTypeResponseBody `form:"goods_type,omitempty" json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 商品品牌
	GoodsBrand *GoodsBrandResponseBody `form:"goods_brand,omitempty" json:"goods_brand,omitempty" xml:"goods_brand,omitempty"`
	// 商品SKU
	GoodsSku []*GoodsSkuResponseBody `form:"goods_sku,omitempty" json:"goods_sku,omitempty" xml:"goods_sku,omitempty"`
}

// GoodsListInternalServerErrorResponseBody is the type of the "shop" service
// "GoodsList" endpoint HTTP response body for the "internal_server_error"
// error.
type GoodsListInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GoodsListBadRequestResponseBody is the type of the "shop" service
// "GoodsList" endpoint HTTP response body for the "bad_request" error.
type GoodsListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGoodsInternalServerErrorResponseBody is the type of the "shop" service
// "GetGoods" endpoint HTTP response body for the "internal_server_error" error.
type GetGoodsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGoodsBadRequestResponseBody is the type of the "shop" service "GetGoods"
// endpoint HTTP response body for the "bad_request" error.
type GetGoodsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateGoodsInternalServerErrorResponseBody is the type of the "shop" service
// "UpdateGoods" endpoint HTTP response body for the "internal_server_error"
// error.
type UpdateGoodsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateGoodsBadRequestResponseBody is the type of the "shop" service
// "UpdateGoods" endpoint HTTP response body for the "bad_request" error.
type UpdateGoodsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GoodsResponseBody is used to define fields on response body types.
type GoodsResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string                 `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   []*GoodsSpuResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GoodsSpuResponseBody is used to define fields on response body types.
type GoodsSpuResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 商品名称
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 商品描述
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// 商品类型
	GoodsType *GoodsTypeResponseBody `form:"goods_type,omitempty" json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 商品品牌
	GoodsBrand *GoodsBrandResponseBody `form:"goods_brand,omitempty" json:"goods_brand,omitempty" xml:"goods_brand,omitempty"`
	// 商品SKU
	GoodsSku []*GoodsSkuResponseBody `form:"goods_sku,omitempty" json:"goods_sku,omitempty" xml:"goods_sku,omitempty"`
}

// GoodsTypeResponseBody is used to define fields on response body types.
type GoodsTypeResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 类型名称
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 类型描述
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// GoodsBrandResponseBody is used to define fields on response body types.
type GoodsBrandResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 品牌名称
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 品牌描述
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// GoodsSkuResponseBody is used to define fields on response body types.
type GoodsSkuResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 颜色
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 商品SKU规格值
	GoodsSkuValue []*GoodsSkuValueResponseBody `form:"goods_sku_value,omitempty" json:"goods_sku_value,omitempty" xml:"goods_sku_value,omitempty"`
}

// GoodsSkuValueResponseBody is used to define fields on response body types.
type GoodsSkuValueResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 红色
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewUpdateGoodsRequestBody builds the HTTP request body from the payload of
// the "UpdateGoods" endpoint of the "shop" service.
func NewUpdateGoodsRequestBody(p *shop.UpdateGoodsPayload) *UpdateGoodsRequestBody {
	body := &UpdateGoodsRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	return body
}

// NewGoodsListResultOK builds a "shop" service "GoodsList" endpoint result
// from a HTTP "OK" response.
func NewGoodsListResultOK(body *GoodsListResponseBody) *shop.GoodsListResult {
	v := &shop.GoodsListResult{
		NextCursor: *body.NextCursor,
		Total:      *body.Total,
	}
	v.Items = make([]*shop.Goods, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalGoodsResponseBodyToShopGoods(val)
	}

	return v
}

// NewGoodsListInternalServerError builds a shop service GoodsList endpoint
// internal_server_error error.
func NewGoodsListInternalServerError(body *GoodsListInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGoodsListBadRequest builds a shop service GoodsList endpoint bad_request
// error.
func NewGoodsListBadRequest(body *GoodsListBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGoodsGoodsSpuOK builds a "shop" service "GetGoods" endpoint result
// from a HTTP "OK" response.
func NewGetGoodsGoodsSpuOK(body *GetGoodsResponseBody) *shopviews.GoodsSpuView {
	v := &shopviews.GoodsSpuView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
	}
	v.GoodsType = unmarshalGoodsTypeResponseBodyToShopviewsGoodsTypeView(body.GoodsType)
	v.GoodsBrand = unmarshalGoodsBrandResponseBodyToShopviewsGoodsBrandView(body.GoodsBrand)
	if body.GoodsSku != nil {
		v.GoodsSku = make([]*shopviews.GoodsSkuView, len(body.GoodsSku))
		for i, val := range body.GoodsSku {
			v.GoodsSku[i] = unmarshalGoodsSkuResponseBodyToShopviewsGoodsSkuView(val)
		}
	}

	return v
}

// NewGetGoodsInternalServerError builds a shop service GetGoods endpoint
// internal_server_error error.
func NewGetGoodsInternalServerError(body *GetGoodsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGoodsBadRequest builds a shop service GetGoods endpoint bad_request
// error.
func NewGetGoodsBadRequest(body *GetGoodsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateGoodsGoodsSpuOK builds a "shop" service "UpdateGoods" endpoint
// result from a HTTP "OK" response.
func NewUpdateGoodsGoodsSpuOK(body *UpdateGoodsResponseBody) *shopviews.GoodsSpuView {
	v := &shopviews.GoodsSpuView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
	}
	v.GoodsType = unmarshalGoodsTypeResponseBodyToShopviewsGoodsTypeView(body.GoodsType)
	v.GoodsBrand = unmarshalGoodsBrandResponseBodyToShopviewsGoodsBrandView(body.GoodsBrand)
	if body.GoodsSku != nil {
		v.GoodsSku = make([]*shopviews.GoodsSkuView, len(body.GoodsSku))
		for i, val := range body.GoodsSku {
			v.GoodsSku[i] = unmarshalGoodsSkuResponseBodyToShopviewsGoodsSkuView(val)
		}
	}

	return v
}

// NewUpdateGoodsInternalServerError builds a shop service UpdateGoods endpoint
// internal_server_error error.
func NewUpdateGoodsInternalServerError(body *UpdateGoodsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateGoodsBadRequest builds a shop service UpdateGoods endpoint
// bad_request error.
func NewUpdateGoodsBadRequest(body *UpdateGoodsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGoodsListResponseBody runs the validations defined on
// GoodsListResponseBody
func ValidateGoodsListResponseBody(body *GoodsListResponseBody) (err error) {
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.NextCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nextCursor", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateGoodsResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGoodsListInternalServerErrorResponseBody runs the validations
// defined on GoodsList_internal_server_error_Response_Body
func ValidateGoodsListInternalServerErrorResponseBody(body *GoodsListInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGoodsListBadRequestResponseBody runs the validations defined on
// GoodsList_bad_request_Response_Body
func ValidateGoodsListBadRequestResponseBody(body *GoodsListBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGoodsInternalServerErrorResponseBody runs the validations defined
// on GetGoods_internal_server_error_Response_Body
func ValidateGetGoodsInternalServerErrorResponseBody(body *GetGoodsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGoodsBadRequestResponseBody runs the validations defined on
// GetGoods_bad_request_Response_Body
func ValidateGetGoodsBadRequestResponseBody(body *GetGoodsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateGoodsInternalServerErrorResponseBody runs the validations
// defined on UpdateGoods_internal_server_error_Response_Body
func ValidateUpdateGoodsInternalServerErrorResponseBody(body *UpdateGoodsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateGoodsBadRequestResponseBody runs the validations defined on
// UpdateGoods_bad_request_Response_Body
func ValidateUpdateGoodsBadRequestResponseBody(body *UpdateGoodsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGoodsResponseBody runs the validations defined on goodsResponseBody
func ValidateGoodsResponseBody(body *GoodsResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateGoodsSpuResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGoodsSpuResponseBody runs the validations defined on
// goodsSpuResponseBody
func ValidateGoodsSpuResponseBody(body *GoodsSpuResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.GoodsType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("goods_type", "body"))
	}
	if body.GoodsBrand == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("goods_brand", "body"))
	}
	if body.GoodsType != nil {
		if err2 := ValidateGoodsTypeResponseBody(body.GoodsType); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.GoodsBrand != nil {
		if err2 := ValidateGoodsBrandResponseBody(body.GoodsBrand); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.GoodsSku {
		if e != nil {
			if err2 := ValidateGoodsSkuResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGoodsTypeResponseBody runs the validations defined on
// goodsTypeResponseBody
func ValidateGoodsTypeResponseBody(body *GoodsTypeResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	return
}

// ValidateGoodsBrandResponseBody runs the validations defined on
// goodsBrandResponseBody
func ValidateGoodsBrandResponseBody(body *GoodsBrandResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	return
}

// ValidateGoodsSkuResponseBody runs the validations defined on
// goodsSkuResponseBody
func ValidateGoodsSkuResponseBody(body *GoodsSkuResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	for _, e := range body.GoodsSkuValue {
		if e != nil {
			if err2 := ValidateGoodsSkuValueResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGoodsSkuValueResponseBody runs the validations defined on
// goodsSkuValueResponseBody
func ValidateGoodsSkuValueResponseBody(body *GoodsSkuValueResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
