// Code generated by goa v3.1.1, DO NOT EDIT.
//
// shop client HTTP transport
//
// Command:
// $ goa gen goa-shopping/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the shop service endpoint HTTP clients.
type Client struct {
	// GoodsList Doer is the HTTP client used to make requests to the GoodsList
	// endpoint.
	GoodsListDoer goahttp.Doer

	// GetGoods Doer is the HTTP client used to make requests to the GetGoods
	// endpoint.
	GetGoodsDoer goahttp.Doer

	// UpdateGoods Doer is the HTTP client used to make requests to the UpdateGoods
	// endpoint.
	UpdateGoodsDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the shop service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GoodsListDoer:       doer,
		GetGoodsDoer:        doer,
		UpdateGoodsDoer:     doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GoodsList returns an endpoint that makes HTTP requests to the shop service
// GoodsList server.
func (c *Client) GoodsList() goa.Endpoint {
	var (
		encodeRequest  = EncodeGoodsListRequest(c.encoder)
		decodeResponse = DecodeGoodsListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGoodsListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GoodsListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("shop", "GoodsList", err)
		}
		return decodeResponse(resp)
	}
}

// GetGoods returns an endpoint that makes HTTP requests to the shop service
// GetGoods server.
func (c *Client) GetGoods() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetGoodsRequest(c.encoder)
		decodeResponse = DecodeGetGoodsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetGoodsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetGoodsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("shop", "GetGoods", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateGoods returns an endpoint that makes HTTP requests to the shop service
// UpdateGoods server.
func (c *Client) UpdateGoods() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateGoodsRequest(c.encoder)
		decodeResponse = DecodeUpdateGoodsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateGoodsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateGoodsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("shop", "UpdateGoods", err)
		}
		return decodeResponse(resp)
	}
}
